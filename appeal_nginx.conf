upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/home/kulik/www/deploy/gunicorn.sock fail_timeout=0;

  }

server {
listen 80;
server_name www.qblik.ru;
rewrite ^ http://qblik.ru$request_uri permanent;
}

  server {
    #if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
 }

 server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80;
    client_max_body_size 128M;

    # set the correct host(s) for your site
    server_name qblik.ru www.qblik.ru;
    #server_name 5.45.112.163;

    keepalive_timeout 15;

    root /home/kulik/www/appeal;

#    location static/ {
#        root /home/kulik/www/appeal/static;
# }
    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    #root /home/kulik/www/appeal/
    }

# Media: images, icons, video, audio, HTC
location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
  expires 1M;
  add_header Cache-Control "public";
}

# CSS and Javascript
location ~* \.(?:css|js)$ {
  expires 1M;
  add_header Cache-Control "public";
}

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://localhost:3000;
    }

    #error_page 500 502 503 504 /500.html;
    #location = /500.html {
    #  root /var/www/prozdo/static;
    #}
  }


server {
listen 8000;
server_name 5.45.112.163 qblik.ru;

location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }
}

